package com.DynamicPro.Fibonacci;

/**
 * 动态规划第五题：打家劫舍
 *
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，
 * 影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
 * 如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 *
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
 *
 * 示例 1：
 * 输入：[1,2,3,1]
 * 输出：4
 * 解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
 *      偷窃到的最高金额 = 1 + 3 = 4 。
 *
 * 示例 2：
 * 输入：[2,7,9,3,1]
 * 输出：12
 * 解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
 *      偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 */
public class Pra05 {
    public static void main(String[] args) {

        Solution_D05 solution_d05 = new Solution_D05();
        int[] nums = {1,2,3,1};
        int result = solution_d05.rob(nums);
        System.out.println(result);
    }
}

class Solution_D05 {
    public int rob(int[] nums) {
        /**
         * 第 n间被偷那就说明第 n+1间不可以被偷
         * tmp用于实时存储上一次的算数, 可以避免数据丢失
         */
        int pre = 0, cur = 0, tmp;

        // 直接获取nums数组中的元素
        for (int num : nums
             ) {
            tmp = cur;
            cur = Math.max(pre + num, cur);
            pre = tmp;
        }
        return cur;
    }
}
