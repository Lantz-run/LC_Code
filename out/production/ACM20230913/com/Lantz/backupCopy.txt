        int maxLength = 1; // 用来记录最大的递增区间
        int currentLength = 1; // 用来记录当前的递增区间

        if (arr.size() <= 1){
            return arr.size();
        }

        arr.add(Integer.MIN_VALUE);
        // 遍历区间，找最大的递增区间
        for (int i = 1; i < n; i++) {
            // 判断元素的大小
            if (arr.get(i).compareTo(arr.get(i-1))>0 ){
                currentLength++;

            }else {
                maxLength = Math.max(maxLength, currentLength); // 重新确认新的最大递增区间
                currentLength = 1; // 重置为1
                result = Math.max(result, currentLength); // 确定最大递增区间
            }

        }

        int len = nums.length;

        Map<Integer, Integer> hashMap = new HashMap<>(len-1);
        hashMap.put(nums[0], 0);

        for (int i = 0; i < len; i++) {
            if (hashMap.containsKey(target - nums[i])){
                return new int[]{hashMap.get(target - nums[i]), i};
            }
            hashMap.put(nums[i], i);
        }